{
    "$Version": "4.0",
    "$Reference": {
        "https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.json": {
            "$Include": [
                {
                    "$Alias": "Core",
                    "$Namespace": "Org.OData.Core.V1"
                }
            ]
        },
        "https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Validation.V1.json": {
            "$Include": [
                {
                    "$Alias": "Validation",
                    "$Namespace": "Org.OData.Validation.V1"
                }
            ]
        }
    },
    "Org.OData.Capabilities.V1": {
        "$Alias": "Capabilities",
        "@Core.Description": "Terms describing capabilities of a service",
        "@Core.Links": [
            {
                "rel": "latest-version",
                "href": "https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Capabilities.V1.json"
            },
            {
                "rel": "alternate",
                "href": "https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Capabilities.V1.xml"
            },
            {
                "rel": "describedby",
                "href": "https://github.com/oasis-tcs/odata-vocabularies/blob/master/vocabularies/Org.OData.Capabilities.V1.md"
            }
        ],
        "@Core.LongDescription": "\nThere are some capabilities which are strongly recommended for services to support even\nthough they are optional. Support for $top and $skip is a good example as\nsupporting these query options helps with performance of a service and are essential. Such\ncapabilities are assumed to be default capabilities of an OData service even in\nthe case that a capabilities annotation doesn’t exist. Capabilities annotations are\nmainly expected to be used to explicitly specify that a service doesn’t support such\ncapabilities. Capabilities annotations can as well be used to declaratively\nspecify the support of such capabilities.\n\nOn the other hand, there are some capabilities that a service may choose to support or\nnot support and in varying degrees. $filter and $orderby are such good examples.\nThis vocabulary aims to define terms to specify support or no support for such\ncapabilities.\n\nA service is assumed to support by default the following capabilities even though an\nannotation doesn’t exist:\n- Countability ($count)\n- Client pageability ($top, $skip)\n- Expandability ($expand)\n- Indexability by key\n- Batch support ($batch)\n- Navigability of navigation properties\n\nA service is expected to support the following capabilities. If not supported, the\nservice is expected to call out the restrictions using annotations:\n- Filterability ($filter)\n- Sortability ($orderby)\n- Queryability of top level entity sets\n- Query functions\n\nA client cannot assume that a service supports certain capabilities. A client can try, but\nit needs to be prepared to handle an error in case the following capabilities are not\nsupported:\n- Insertability\n- Updatability\n- Deletability\n        ",
        "ConformanceLevel": {
            "$Kind": "Term",
            "$Nullable": true,
            "$Type": "Capabilities.ConformanceLevelType",
            "$AppliesTo": [
                "EntityContainer"
            ],
            "@Core.Description": "The conformance level achieved by this service"
        },
        "ConformanceLevelType": {
            "$Kind": "EnumType",
            "Minimal": 0,
            "Minimal@Core.Description": "Minimal conformance level",
            "Intermediate": 1,
            "Intermediate@Core.Description": "Intermediate conformance level",
            "Advanced": 2,
            "Advanced@Core.Description": "Advanced conformance level"
        },
        "SupportedFormats": {
            "$Kind": "Term",
            "$Collection": true,
            "$AppliesTo": [
                "EntityContainer"
            ],
            "@Core.Description": "Media types of supported formats, including format parameters",
            "@Core.IsMediaType": true
        },
        "SupportedMetadataFormats": {
            "$Kind": "Term",
            "$Collection": true,
            "$AppliesTo": [
                "EntityContainer"
            ],
            "@Core.Description": "Media types of supported formats for $metadata, including format parameters",
            "@Core.IsMediaType": true
        },
        "AcceptableEncodings": {
            "$Kind": "Term",
            "$Collection": true,
            "$AppliesTo": [
                "EntityContainer"
            ],
            "@Core.Description": "List of acceptable compression methods for ($batch) requests, e.g. gzip"
        },
        "AsynchronousRequestsSupported": {
            "$Kind": "Term",
            "$Type": "Core.Tag",
            "$DefaultValue": true,
            "$AppliesTo": [
                "EntityContainer"
            ],
            "@Core.Description": "Service supports the asynchronous request preference"
        },
        "BatchContinueOnErrorSupported": {
            "$Kind": "Term",
            "$Type": "Core.Tag",
            "$DefaultValue": true,
            "$AppliesTo": [
                "EntityContainer"
            ],
            "@Core.Description": "Service supports the continue on error preference. Supports $batch requests. Services that apply the BatchContinueOnErrorSupported term should also specify the ContinueOnErrorSupported property from the BatchSupport term."
        },
        "IsolationSupported": {
            "$Kind": "Term",
            "$Nullable": true,
            "$Type": "Capabilities.IsolationLevel",
            "$AppliesTo": [
                "EntityContainer"
            ],
            "@Core.Description": "Supported odata.isolation levels"
        },
        "IsolationLevel": {
            "$Kind": "EnumType",
            "$IsFlags": true,
            "Snapshot": 1,
            "Snapshot@Core.Description": "All data returned for a request, including multiple requests within a batch or results retrieved across multiple pages, will be consistent as of a single point in time"
        },
        "CrossJoinSupported": {
            "$Kind": "Term",
            "$Type": "Core.Tag",
            "$DefaultValue": true,
            "$AppliesTo": [
                "EntityContainer"
            ],
            "@Core.Description": "Supports cross joins for the entity sets in this container"
        },
        "CallbackSupported": {
            "$Kind": "Term",
            "$Nullable": true,
            "$Type": "Capabilities.CallbackType",
            "$AppliesTo": [
                "EntityContainer",
                "EntitySet"
            ],
            "@Core.Description": "Supports callbacks for the specified protocols"
        },
        "CallbackType": {
            "$Kind": "ComplexType",
            "CallbackProtocols": {
                "$Collection": true,
                "$Type": "Capabilities.CallbackProtocol",
                "@Core.Description": "List of supported callback protocols, e.g. `http` or `wss`"
            },
            "@Core.Description": "A non-empty collection lists the full set of supported protocols. A empty collection means 'only HTTP is supported'"
        },
        "CallbackProtocol": {
            "$Kind": "ComplexType",
            "Id": {
                "$Nullable": true,
                "@Core.Description": "Protocol Identifier"
            },
            "UrlTemplate": {
                "$Nullable": true,
                "@Core.Description": "URL Template including parameters. Parameters are enclosed in curly braces {} as defined in RFC6570"
            },
            "DocumentationUrl": {
                "$Nullable": true,
                "@Core.Description": "Human readable description of the meaning of the URL Template parameters",
                "@Core.IsURL": true
            }
        },
        "ChangeTracking": {
            "$Kind": "Term",
            "$Nullable": true,
            "$Type": "Capabilities.ChangeTrackingType",
            "$AppliesTo": [
                "EntityContainer",
                "EntitySet",
                "Singleton",
                "Function",
                "FunctionImport",
                "NavigationProperty"
            ],
            "@Core.Description": "Change tracking capabilities of this service or entity set"
        },
        "ChangeTrackingType": {
            "$Kind": "ComplexType",
            "Supported": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": true,
                "@Core.Description": "This entity set supports the odata.track-changes preference"
            },
            "FilterableProperties": {
                "$Collection": true,
                "$Type": "Edm.PropertyPath",
                "@Core.Description": "Change tracking supports filters on these properties"
            },
            "ExpandableProperties": {
                "$Collection": true,
                "$Type": "Edm.NavigationPropertyPath",
                "@Core.Description": "Change tracking supports these properties expanded"
            }
        },
        "CountRestrictions": {
            "$Kind": "Term",
            "$Nullable": true,
            "$Type": "Capabilities.CountRestrictionsType",
            "$AppliesTo": [
                "EntitySet"
            ],
            "@Core.Description": "Restrictions on /$count path suffix and $count=true system query option"
        },
        "CountRestrictionsType": {
            "$Kind": "ComplexType",
            "Countable": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": true,
                "@Core.Description": "Entities can be counted"
            },
            "NonCountableProperties": {
                "$Collection": true,
                "$Type": "Edm.PropertyPath",
                "@Core.Description": "These collection properties do not allow /$count segments"
            },
            "NonCountableNavigationProperties": {
                "$Collection": true,
                "$Type": "Edm.NavigationPropertyPath",
                "@Core.Description": "These navigation properties do not allow /$count segments"
            }
        },
        "NavigationRestrictions": {
            "$Kind": "Term",
            "$Nullable": true,
            "$Type": "Capabilities.NavigationRestrictionsType",
            "$AppliesTo": [
                "EntitySet",
                "Singleton"
            ],
            "@Core.Description": "Restrictions on navigating properties according to OData URL conventions",
            "@Core.LongDescription": "Restrictions specified on an entity set are valid whether the request is directly to the entity set or through a navigation property bound to that entity set. Services can specify a different set of restrictions specific to a path, in which case the more specific restrictions take precedence."
        },
        "NavigationRestrictionsType": {
            "$Kind": "ComplexType",
            "Navigability": {
                "$Nullable": true,
                "$Type": "Capabilities.NavigationType",
                "@Core.Description": "Supported Navigability"
            },
            "RestrictedProperties": {
                "$Collection": true,
                "$Type": "Capabilities.NavigationPropertyRestriction",
                "@Core.Description": "List of navigation properties with restrictions"
            }
        },
        "NavigationPropertyRestriction": {
            "$Kind": "ComplexType",
            "NavigationProperty": {
                "$Nullable": true,
                "$Type": "Edm.NavigationPropertyPath",
                "@Core.Description": "Navigation properties can be navigated"
            },
            "Navigability": {
                "$Nullable": true,
                "$Type": "Capabilities.NavigationType",
                "@Core.Description": "Navigation properties can be navigated to this level"
            },
            "FilterFunctions": {
                "$Collection": true,
                "@Core.Description": "List of functions and operators supported in filter expressions. If null, all functions and operators may be attempted."
            },
            "FilterRestrictions": {
                "$Nullable": true,
                "$Type": "Capabilities.FilterRestrictionsType",
                "@Core.Description": "Restrictions on filter expressions"
            },
            "SearchRestrictions": {
                "$Nullable": true,
                "$Type": "Capabilities.SearchRestrictionsType",
                "@Core.Description": "Restrictions on search expressions"
            },
            "SortRestrictions": {
                "$Nullable": true,
                "$Type": "Capabilities.SortRestrictionsType",
                "@Core.Description": "Restrictions on orderby expressions"
            },
            "TopSupported": {
                "$Type": "Core.Tag",
                "$DefaultValue": true,
                "@Core.Description": "Supports $top"
            },
            "SkipSupported": {
                "$Type": "Core.Tag",
                "$DefaultValue": true,
                "@Core.Description": "Supports $skip"
            },
            "IndexableByKey": {
                "$Type": "Core.Tag",
                "$DefaultValue": true,
                "@Core.Description": "Supports key values according to OData URL conventions"
            },
            "InsertRestrictions": {
                "$Nullable": true,
                "$Type": "Capabilities.InsertRestrictionsType",
                "@Core.Description": "Restrictions on insert operations"
            },
            "DeepInsertSupport": {
                "$Nullable": true,
                "$Type": "Capabilities.DeepInsertSupportType",
                "@Core.Description": "Deep Insert Support of the annotated resource (the whole service, an entity set, or a collection-valued resource)"
            },
            "UpdateRestrictions": {
                "$Nullable": true,
                "$Type": "Capabilities.UpdateRestrictionsType",
                "@Core.Description": "Restrictions on update operations"
            },
            "DeepUpdateSupport": {
                "$Nullable": true,
                "$Type": "Capabilities.DeepUpdateSupportType",
                "@Core.Description": "Deep Update Support of the annotated resource (the whole service, an entity set, or a collection-valued resource)"
            },
            "DeleteRestrictions": {
                "$Nullable": true,
                "$Type": "Capabilities.DeleteRestrictionsType",
                "@Core.Description": "Restrictions on delete operations"
            }
        },
        "NavigationType": {
            "$Kind": "EnumType",
            "Recursive": 0,
            "Recursive@Core.Description": "Navigation properties can be recursively navigated",
            "Single": 1,
            "Single@Core.Description": "Navigation properties can be navigated to a single level",
            "None": 2,
            "None@Core.Description": "Navigation properties are not navigable"
        },
        "IndexableByKey": {
            "$Kind": "Term",
            "$Type": "Core.Tag",
            "$DefaultValue": true,
            "$AppliesTo": [
                "EntitySet"
            ],
            "@Core.Description": "Supports key values according to OData URL conventions"
        },
        "TopSupported": {
            "$Kind": "Term",
            "$Type": "Core.Tag",
            "$DefaultValue": true,
            "$AppliesTo": [
                "EntitySet"
            ],
            "@Core.Description": "Supports $top"
        },
        "SkipSupported": {
            "$Kind": "Term",
            "$Type": "Core.Tag",
            "$DefaultValue": true,
            "$AppliesTo": [
                "EntitySet"
            ],
            "@Core.Description": "Supports $skip"
        },
        "BatchSupported": {
            "$Kind": "Term",
            "$Type": "Core.Tag",
            "$DefaultValue": true,
            "$AppliesTo": [
                "EntityContainer"
            ],
            "@Core.Description": "Supports $batch requests. Services that apply the BatchSupported term should also apply the more comprehensive BatchSupport term."
        },
        "BatchSupport": {
            "$Kind": "Term",
            "$Nullable": true,
            "$Type": "Capabilities.BatchSupportType",
            "$AppliesTo": [
                "EntityContainer"
            ],
            "@Core.Description": "Batch Support for the service"
        },
        "BatchSupportType": {
            "$Kind": "ComplexType",
            "Supported": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": true,
                "@Core.Description": "Service supports requests to $batch"
            },
            "ContinueOnErrorSupported": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": false,
                "@Core.Description": "Service supports the continue on error preference"
            },
            "ReferencesInRequestBodiesSupported": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": false,
                "@Core.Description": "Service supports Content-ID referencing in request bodies"
            },
            "ReferencesAcrossChangeSetsSupported": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": false,
                "@Core.Description": "Service supports Content-ID referencing across change sets"
            },
            "EtagReferencesSupported": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": false,
                "@Core.Description": "Service supports referencing Etags from previous requests"
            },
            "RequestDependencyConditionsSupported": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": false,
                "@Core.Description": "Service supports the `if` member in JSON batch requests"
            },
            "SupportedFormats": {
                "$Collection": true,
                "@Core.Description": "Media types of supported formats for $batch",
                "@Core.IsMediaType": true,
                "@Validation.AllowedValues": [
                    {
                        "Value": "multipart/mixed",
                        "@Core.Description": "Multipart Batch Format, see http://docs.oasis-open.org/odata/odata/v4.01/cs01/part1-protocol/odata-v4.01-cs01-part1-protocol.html#sec_MultipartBatchFormat"
                    },
                    {
                        "Value": "application/json",
                        "@Core.Description": "JSON Batch Format, see http://docs.oasis-open.org/odata/odata-json-format/v4.01/cs01/odata-json-format-v4.01-cs01.html#sec_BatchRequestsandResponses"
                    }
                ]
            }
        },
        "FilterFunctions": {
            "$Kind": "Term",
            "$Collection": true,
            "$AppliesTo": [
                "EntityContainer",
                "EntitySet"
            ],
            "@Core.Description": "List of functions and operators supported in $filter"
        },
        "FilterRestrictions": {
            "$Kind": "Term",
            "$Nullable": true,
            "$Type": "Capabilities.FilterRestrictionsType",
            "$AppliesTo": [
                "EntitySet"
            ],
            "@Core.Description": "Restrictions on filter expressions"
        },
        "FilterRestrictionsType": {
            "$Kind": "ComplexType",
            "Filterable": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": true,
                "@Core.Description": "$filter is supported"
            },
            "RequiresFilter": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": false,
                "@Core.Description": "$filter is required"
            },
            "RequiredProperties": {
                "$Collection": true,
                "$Type": "Edm.PropertyPath",
                "@Core.Description": "These properties must be specified in the $filter clause (properties of derived types are not allowed here)"
            },
            "NonFilterableProperties": {
                "$Collection": true,
                "$Type": "Edm.PropertyPath",
                "@Core.Description": "These structural properties cannot be used in filter expressions"
            },
            "FilterExpressionRestrictions": {
                "$Collection": true,
                "$Type": "Capabilities.FilterExpressionRestrictionType",
                "@Core.Description": "These properties only allow a subset of filter expressions. A valid filter expression for a single property can be enclosed in parentheses and combined by `and` with valid expressions for other properties."
            },
            "MaxLevels": {
                "$Type": "Edm.Int32",
                "$DefaultValue": -1,
                "@Core.Description": "The maximum number of levels (including recursion) that can be traversed in a filter expression. A value of -1 indicates there is no restriction."
            }
        },
        "FilterExpressionRestrictionType": {
            "$Kind": "ComplexType",
            "Property": {
                "$Nullable": true,
                "$Type": "Edm.PropertyPath",
                "@Core.Description": "Path to the restricted property"
            },
            "AllowedExpressions": {
                "$Nullable": true,
                "$Type": "Capabilities.FilterExpressionType",
                "@Core.Description": "Allowed subset of expressions"
            }
        },
        "FilterExpressionType": {
            "$Kind": "TypeDefinition",
            "$UnderlyingType": "Edm.String",
            "@Validation.AllowedValues": [
                {
                    "Value": "SingleValue",
                    "@Core.Description": "Property can be used in a single `eq` clause"
                },
                {
                    "Value": "MultiValue",
                    "@Core.Description": "Property can be used in a single `in` clause"
                },
                {
                    "Value": "SingleRange",
                    "@Core.Description": "Property can be used in at most one `ge` and/or one `le` clause, separated by `and`"
                },
                {
                    "Value": "SearchExpression",
                    "@Core.Description": "String property can be used as first operand in `startswith`, `endswith`, and `contains` clauses"
                },
                {
                    "Value": "MultiRange",
                    "@Core.Description": "Property can be compared to a union of one or more closed, half-open, or open intervals",
                    "@Core.LongDescription": "The filter expression for this property consists of one or more interval expressions combined by `or`. A single interval expression is either a single comparison of the property and a literal value with `eq`, `le`, `lt`, `ge`, or `gt`, or pair of boundaries combined by `and` and enclosed in parentheses. The lower boundary is either `ge` or `gt`, the upper boundary either `le` or `lt`."
                },
                {
                    "Value": "MultiRangeOrSearchExpression",
                    "@Core.Description": "Property can be compared to a union of zero or more closed, half-open, or open intervals plus zero or more simple string patterns",
                    "@Core.LongDescription": "The filter expression for this property consists of one or more interval expressions or string comparison functions combined by `or`. See MultiRange for a definition of an interval expression. See SearchExpression for the allowed string comparison functions."
                }
            ]
        },
        "SortRestrictions": {
            "$Kind": "Term",
            "$Nullable": true,
            "$Type": "Capabilities.SortRestrictionsType",
            "$AppliesTo": [
                "EntitySet"
            ],
            "@Core.Description": "Restrictions on orderby expressions"
        },
        "SortRestrictionsType": {
            "$Kind": "ComplexType",
            "Sortable": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": true,
                "@Core.Description": "$orderby is supported"
            },
            "AscendingOnlyProperties": {
                "$Collection": true,
                "$Type": "Edm.PropertyPath",
                "@Core.Description": "These properties can only be used for sorting in Ascending order"
            },
            "DescendingOnlyProperties": {
                "$Collection": true,
                "$Type": "Edm.PropertyPath",
                "@Core.Description": "These properties can only be used for sorting in Descending order"
            },
            "NonSortableProperties": {
                "$Collection": true,
                "$Type": "Edm.PropertyPath",
                "@Core.Description": "These structural properties cannot be used in orderby expressions"
            }
        },
        "ExpandRestrictions": {
            "$Kind": "Term",
            "$Nullable": true,
            "$Type": "Capabilities.ExpandRestrictionsType",
            "$AppliesTo": [
                "EntitySet",
                "Singleton"
            ],
            "@Core.Description": "Restrictions on expand expressions"
        },
        "ExpandRestrictionsType": {
            "$Kind": "ComplexType",
            "Expandable": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": true,
                "@Core.Description": "$expand is supported"
            },
            "NonExpandableProperties": {
                "$Collection": true,
                "$Type": "Edm.NavigationPropertyPath",
                "@Core.Description": "These properties cannot be used in expand expressions"
            },
            "MaxLevels": {
                "$Type": "Edm.Int32",
                "$DefaultValue": -1,
                "@Core.Description": "The maximum number of levels that can be expanded in a expand expression. A value of -1 indicates there is no restriction."
            }
        },
        "SearchRestrictions": {
            "$Kind": "Term",
            "$Nullable": true,
            "$Type": "Capabilities.SearchRestrictionsType",
            "$AppliesTo": [
                "EntitySet"
            ],
            "@Core.Description": "Restrictions on search expressions"
        },
        "SearchRestrictionsType": {
            "$Kind": "ComplexType",
            "Searchable": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": true,
                "@Core.Description": "$search is supported"
            },
            "UnsupportedExpressions": {
                "$Type": "Capabilities.SearchExpressions",
                "$DefaultValue": "none",
                "@Core.Description": "Expressions not supported in $search"
            }
        },
        "SearchExpressions": {
            "$Kind": "EnumType",
            "$IsFlags": true,
            "none": 0,
            "none@Core.Description": "Single search term",
            "AND": 1,
            "AND@Core.Description": "Multiple search terms separated by `AND`",
            "OR": 2,
            "OR@Core.Description": "Multiple search terms separated by `OR`",
            "NOT": 4,
            "NOT@Core.Description": "Search terms preceded by `NOT`",
            "phrase": 8,
            "phrase@Core.Description": "Search phrases enclosed in double quotes",
            "group": 16,
            "group@Core.Description": "Precedence grouping of search expressions with parentheses"
        },
        "KeyAsSegmentSupported": {
            "$Kind": "Term",
            "$Type": "Core.Tag",
            "$DefaultValue": true,
            "$AppliesTo": [
                "EntityContainer"
            ],
            "@Core.Description": "Supports [key-as-segment convention](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_KeyasSegmentConvention) for addressing entities within a collection"
        },
        "InsertRestrictions": {
            "$Kind": "Term",
            "$Nullable": true,
            "$Type": "Capabilities.InsertRestrictionsType",
            "$AppliesTo": [
                "EntitySet"
            ],
            "@Core.Description": "Restrictions on insert operations"
        },
        "InsertRestrictionsType": {
            "$Kind": "ComplexType",
            "Insertable": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": true,
                "@Core.Description": "Entities can be inserted"
            },
            "NonInsertableNavigationProperties": {
                "$Collection": true,
                "$Type": "Edm.NavigationPropertyPath",
                "@Core.Description": "These navigation properties do not allow deep inserts"
            },
            "MaxLevels": {
                "$Type": "Edm.Int32",
                "$DefaultValue": -1,
                "@Core.Description": "The maximum number of navigation properties that can be traversed when addressing the collection to insert into. A value of -1 indicates there is no restriction."
            },
            "QueryOptions": {
                "$Nullable": true,
                "$Type": "Capabilities.ModificationQueryOptionsType",
                "@Core.Description": "Support for query options with insert requests"
            }
        },
        "DeepInsertSupport": {
            "$Kind": "Term",
            "$Nullable": true,
            "$Type": "Capabilities.DeepInsertSupportType",
            "$AppliesTo": [
                "EntityContainer",
                "EntitySet"
            ],
            "@Core.Description": "Deep Insert Support of the annotated resource (the whole service, an entity set, or a collection-valued resource)"
        },
        "DeepInsertSupportType": {
            "$Kind": "ComplexType",
            "Supported": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": true,
                "@Core.Description": "Annotation target supports deep inserts"
            },
            "ContentIDSupported": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": true,
                "@Core.Description": "Annotation target supports accepting and returning nested entities annotated with the `Core.ContentID` instance annotation."
            }
        },
        "UpdateRestrictions": {
            "$Kind": "Term",
            "$Nullable": true,
            "$Type": "Capabilities.UpdateRestrictionsType",
            "$AppliesTo": [
                "EntitySet",
                "Singleton"
            ],
            "@Core.Description": "Restrictions on update operations"
        },
        "UpdateRestrictionsType": {
            "$Kind": "ComplexType",
            "Updatable": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": true,
                "@Core.Description": "Entities can be updated"
            },
            "NonUpdatableNavigationProperties": {
                "$Collection": true,
                "$Type": "Edm.NavigationPropertyPath",
                "@Core.Description": "These navigation properties do not allow rebinding"
            },
            "MaxLevels": {
                "$Type": "Edm.Int32",
                "$DefaultValue": -1,
                "@Core.Description": "The maximum number of navigation properties that can be traversed when addressing the collection or entity to update. A value of -1 indicates there is no restriction."
            },
            "QueryOptions": {
                "$Nullable": true,
                "$Type": "Capabilities.ModificationQueryOptionsType",
                "@Core.Description": "Support for query options with update requests"
            }
        },
        "DeepUpdateSupport": {
            "$Kind": "Term",
            "$Nullable": true,
            "$Type": "Capabilities.DeepUpdateSupportType",
            "$AppliesTo": [
                "EntityContainer",
                "EntitySet"
            ],
            "@Core.Description": "Deep Update Support of the annotated resource (the whole service, an entity set, or a collection-valued resource)"
        },
        "DeepUpdateSupportType": {
            "$Kind": "ComplexType",
            "Supported": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": true,
                "@Core.Description": "Annotation target supports deep updates"
            },
            "ContentIDSupported": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": true,
                "@Core.Description": "Annotation target supports accepting and returning nested entities annotated with the `Core.ContentID` instance annotation."
            }
        },
        "DeleteRestrictions": {
            "$Kind": "Term",
            "$Nullable": true,
            "$Type": "Capabilities.DeleteRestrictionsType",
            "$AppliesTo": [
                "EntitySet"
            ],
            "@Core.Description": "Restrictions on delete operations"
        },
        "DeleteRestrictionsType": {
            "$Kind": "ComplexType",
            "Deletable": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": true,
                "@Core.Description": "Entities can be deleted"
            },
            "NonDeletableNavigationProperties": {
                "$Collection": true,
                "$Type": "Edm.NavigationPropertyPath",
                "@Core.Description": "These navigation properties do not allow DeleteLink requests"
            },
            "MaxLevels": {
                "$Type": "Edm.Int32",
                "$DefaultValue": -1,
                "@Core.Description": "The maximum number of navigation properties that can be traversed when addressing the collection to delete from or the entity to delete. A value of -1 indicates there is no restriction."
            }
        },
        "CollectionPropertyRestrictions": {
            "$Kind": "Term",
            "$Collection": true,
            "$Type": "Capabilities.CollectionPropertyRestrictionsType",
            "$AppliesTo": [
                "EntitySet",
                "Singleton"
            ],
            "@Core.Description": "Describes restrictions on operations applied to collection-valued structural properties"
        },
        "CollectionPropertyRestrictionsType": {
            "$Kind": "ComplexType",
            "CollectionProperty": {
                "$Nullable": true,
                "$Type": "Edm.PropertyPath",
                "@Core.Description": "Restricted Collection-valued property"
            },
            "FilterFunctions": {
                "$Collection": true,
                "@Core.Description": "List of functions and operators supported in filter expressions. If null, all functions and operators may be attempted"
            },
            "FilterRestrictions": {
                "$Nullable": true,
                "$Type": "Capabilities.FilterRestrictionsType",
                "@Core.Description": "Restrictions on filter expressions"
            },
            "SearchRestrictions": {
                "$Nullable": true,
                "$Type": "Capabilities.SearchRestrictionsType",
                "@Core.Description": "Restrictions on search expressions"
            },
            "SortRestrictions": {
                "$Nullable": true,
                "$Type": "Capabilities.SortRestrictionsType",
                "@Core.Description": "Restrictions on orderby expressions"
            },
            "TopSupported": {
                "$Type": "Core.Tag",
                "$DefaultValue": true,
                "@Core.Description": "Supports $top"
            },
            "SkipSupported": {
                "$Type": "Core.Tag",
                "$DefaultValue": true,
                "@Core.Description": "Supports $skip"
            },
            "Insertable": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": true,
                "@Core.Description": "This collection supports positional inserts"
            },
            "Updatable": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": true,
                "@Core.Description": "Members of this ordered collection can be updated by ordinal"
            },
            "Deletable": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": true,
                "@Core.Description": "Members of this ordered collection can be deleted by ordinal"
            }
        },
        "AnnotationValuesInQuerySupported": {
            "$Kind": "Term",
            "$Type": "Core.Tag",
            "$DefaultValue": "True",
            "$AppliesTo": [
                "EntityContainer"
            ],
            "@Core.Description": "Supports annotation values within system query options"
        },
        "ModificationQueryOptions": {
            "$Kind": "Term",
            "$Nullable": true,
            "$Type": "Capabilities.ModificationQueryOptionsType",
            "$AppliesTo": [
                "EntityContainer",
                "Action",
                "ActionImport"
            ],
            "@Core.Description": "Support for query options with modification requests (insert, update, action invocation)"
        },
        "ModificationQueryOptionsType": {
            "$Kind": "ComplexType",
            "ExpandSupported": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": false,
                "@Core.Description": "Supports $expand with modification requests"
            },
            "SelectSupported": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": false,
                "@Core.Description": "Supports $select with modification requests"
            },
            "ComputeSupported": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": false,
                "@Core.Description": "Supports $compute with modification requests"
            },
            "FilterSupported": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": false,
                "@Core.Description": "Supports $filter with modification requests"
            },
            "SearchSupported": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": false,
                "@Core.Description": "Supports $search with modification requests"
            },
            "SortSupported": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": false,
                "@Core.Description": "Supports $orderby with modification requests"
            }
        }
    }
}
