{
    "$Version": "4.0",
    "$Reference": {
        "https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.json": {
            "$Include": [
                {
                    "$Namespace": "Org.OData.Core.V1",
                    "$Alias": "Core"
                }
            ]
        },
        "https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Capabilities.V1.json": {
            "$Include": [
                {
                    "$Namespace": "Org.OData.Capabilities.V1",
                    "$Alias": "Capabilities"
                }
            ]
        }
    },
    "Org.OData.Aggregation.V1": {
        "$Alias": "Aggregation",
        "@Core.Description": "Terms to describe which data in a given entity model can be aggregated, and how.",
        "@Core.Links": [
            {
                "rel": "alternate",
                "href": "https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Aggregation.V1.xml"
            },
            {
                "rel": "latest-version",
                "href": "https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Aggregation.V1.json"
            },
            {
                "rel": "describedby",
                "href": "https://github.com/oasis-tcs/odata-vocabularies/blob/main/vocabularies/Org.OData.Aggregation.V1.md"
            }
        ],
        "ApplySupported": {
            "$Kind": "Term",
            "$Type": "Aggregation.ApplySupportedType",
            "$AppliesTo": [
                "EntitySet",
                "Collection",
                "EntityType"
            ],
            "@Core.AppliesViaContainer": true,
            "@Core.Description": "This entity set or collection supports the `$apply` system query option"
        },
        "ApplySupportedDefaults": {
            "$Kind": "Term",
            "$Type": "Aggregation.ApplySupportedBase",
            "$AppliesTo": [
                "EntityContainer"
            ],
            "@Core.Description": "Default support of the `$apply` system query option for all collection-valued resources in the container",
            "@Core.LongDescription": "Annotating term [`ApplySupported`](#ApplySupported) for a specific collection-valued resource overrides the default support with the specified properties using PATCH semantics:\n\n- Primitive or collection-valued properties specified in `ApplySupported` replace the corresponding properties specified in `ApplySupportedDefaults`\n\n- Complex-valued properties specified in `ApplySupported` override the corresponding properties specified in `ApplySupportedDefaults` using PATCH semantics recursively\n\n- Properties specified neither in `ApplySupported` nor in `ApplySupportedDefaults` have their default value\n          "
        },
        "ApplySupportedBase": {
            "$Kind": "ComplexType",
            "Transformations": {
                "$Collection": true,
                "@Core.Description": "Transformations that can be used in `$apply`"
            },
            "CustomAggregationMethods": {
                "$Collection": true,
                "@Core.Description": "Qualified names of custom aggregation methods that can be used in `aggregate(...with...)`"
            },
            "Rollup": {
                "$Type": "Aggregation.RollupType",
                "$DefaultValue": "MultipleHierarchies",
                "@Core.Description": "The service supports rollup hierarchies in a `groupby` transformation"
            }
        },
        "ApplySupportedType": {
            "$Kind": "ComplexType",
            "$BaseType": "Aggregation.ApplySupportedBase",
            "PropertyRestrictions": {
                "$Type": "Edm.Boolean",
                "$DefaultValue": false,
                "@Core.Revisions": [
                    {
                        "Kind": "Deprecated",
                        "Description": "Deprecated since [`Groupable`](#Groupable) and [`Aggregatable`](#Aggregatable) are deprecated"
                    }
                ],
                "@Core.Description": "Only properties marked as `Groupable` can be used in the `groupby` transformation, and only those marked as `Aggregatable` can be used in the  `aggregate` transformation"
            },
            "GroupableProperties": {
                "$Collection": true,
                "$Type": "Edm.PropertyPath",
                "@Core.Description": "A non-empty collection indicates that only the listed properties of the annotated target are supported by the `groupby` transformation"
            },
            "AggregatableProperties": {
                "$Collection": true,
                "$Type": "Aggregation.AggregatablePropertyType",
                "@Core.Description": "A non-empty collection indicates that only the listed properties of the annotated target can be used in the `aggregate` transformation, optionally restricted to the specified aggregation methods"
            }
        },
        "AggregatablePropertyType": {
            "$Kind": "ComplexType",
            "Property": {
                "$Type": "Edm.PropertyPath",
                "@Core.Description": "Aggregatable property"
            },
            "SupportedAggregationMethods": {
                "$Collection": true,
                "@Core.Description": "Standard and custom aggregation methods than can be applied to the property. If omitted, all aggregation methods can be applied"
            },
            "RecommendedAggregationMethod": {
                "$Nullable": true,
                "@Core.Description": "Recommended method for aggregating values of the property"
            }
        },
        "RollupType": {
            "$Kind": "EnumType",
            "@Core.Description": "The number of `rollup` or `rollupall` operators allowed in a `groupby` transformation",
            "None": 0,
            "None@Core.Description": "No support for `rollup` or `rollupall` ",
            "SingleHierarchy": 1,
            "SingleHierarchy@Core.Description": "Only one `rollup` or `rollupall` operator per `groupby`",
            "MultipleHierarchies": 2,
            "MultipleHierarchies@Core.Description": "Full support for `rollup` and `rollupall`"
        },
        "Groupable": {
            "$Kind": "Term",
            "$Type": "Core.Tag",
            "$DefaultValue": true,
            "$AppliesTo": [
                "Property",
                "NavigationProperty"
            ],
            "@Core.Revisions": [
                {
                    "Kind": "Deprecated",
                    "Description": "Deprecated in favor of [`ApplySupported/GroupableProperties`](#ApplySupported)"
                }
            ],
            "@Core.Description": "This property can be used in the `groupby` transformation"
        },
        "Aggregatable": {
            "$Kind": "Term",
            "$Type": "Core.Tag",
            "$DefaultValue": true,
            "$AppliesTo": [
                "Property",
                "NavigationProperty"
            ],
            "@Core.Revisions": [
                {
                    "Kind": "Deprecated",
                    "Description": "Deprecated in favor of [`ApplySupported/AggregatableProperties`](#ApplySupported)"
                }
            ],
            "@Core.Description": "This property can be used in the `aggregate` transformation"
        },
        "CustomAggregate": {
            "$Kind": "Term",
            "$AppliesTo": [
                "EntitySet",
                "Collection",
                "EntityContainer",
                "EntityType"
            ],
            "@Core.AppliesViaContainer": true,
            "@Core.Description": "Dynamic property that can be used in the `aggregate` transformation",
            "@Core.LongDescription": "This term MUST be applied with a Qualifier, the Qualifier value is the name of the dynamic property. The value of the annotation MUST be the qualified name of a primitive type. The aggregated value will be of that type."
        },
        "ContextDefiningProperties": {
            "$Kind": "Term",
            "$Collection": true,
            "$Type": "Edm.PropertyPath",
            "$AppliesTo": [
                "Property",
                "Annotation"
            ],
            "@Core.Description": "The annotated property or custom aggregate is only well-defined in the context of these properties",
            "@Core.LongDescription": "The context-defining properties need either be part of the result entities, or be restricted to a single value by a pre-filter operation. Examples are postal codes within a country, or monetary amounts whose context is the unit of currency."
        },
        "LeveledHierarchy": {
            "$Kind": "Term",
            "$Collection": true,
            "$Type": "Edm.PropertyPath",
            "$AppliesTo": [
                "EntityType",
                "ComplexType"
            ],
            "@Core.Description": "Defines a leveled hierarchy by defining an ordered list of properties in the hierarchy"
        },
        "RecursiveHierarchy": {
            "$Kind": "Term",
            "$Type": "Aggregation.RecursiveHierarchyType",
            "$AppliesTo": [
                "EntityType",
                "ComplexType"
            ],
            "@Core.Description": "Defines a recursive hierarchy."
        },
        "RecursiveHierarchyType": {
            "$Kind": "ComplexType",
            "NodeProperty": {
                "$Type": "Edm.PropertyPath",
                "@Core.Description": "Property holding the hierarchy node value"
            },
            "ParentNavigationProperty": {
                "$Type": "Edm.NavigationPropertyPath",
                "@Core.Description": "Property for navigating to the parent node"
            },
            "DistanceFromRootProperty": {
                "$Type": "Edm.PropertyPath",
                "$Nullable": true,
                "@Core.Description": "Property holding the number of edges between the node and the root node"
            },
            "IsLeafProperty": {
                "$Type": "Edm.PropertyPath",
                "$Nullable": true,
                "@Core.Description": "Property indicating whether the node is a leaf of the hierarchy"
            }
        },
        "HierarchyQualifier": {
            "$Kind": "TypeDefinition",
            "$UnderlyingType": "Edm.String",
            "@Core.Description": "Qualifier of a [`RecursiveHierarchy`](#RecursiveHierarchy) annotation",
            "@Core.LongDescription": "In functions defined in this vocabulary, a parameter of this type\n          identifies the [`RecursiveHierarchy`] annotation on the entity type of the function's binding parameter\n          that specifies the hierarchy that is evaluated by the function.\n          Nodes in the hierarchy are identified by the primitive value of the `RecursiveHierarchy/NodeProperty`."
        },
        "move": [
            {
                "$Kind": "Function",
                "$IsBound": true,
                "@Core.Description": "Returns an entity in the specified entity set with the same structure as the binding parameter, or null if no such entity exists",
                "@Core.LongDescription": "The binding parameter \"moves into\" the specified entity set. This can be used to specify\na recursive hierarchy from a \"directory\" of hierarchies, for use in the hierarchy\nfunctions defined in this vocabulary, for example:\n```\nGET ~/Sales?$filter=SalesOrganization\n /Aggregation.move(EntitySet=@Hierarchy)\n /Aggregation.isdescendant(Hierarchy='SalesOrgHierarchy',Node='EMEA')\n&@Hierarchy=$root/SalesOrgHierarchyDirectory('Regional')/Nodes\n```",
                "$Parameter": [
                    {
                        "$Name": "Entity",
                        "$Type": "Edm.EntityType",
                        "$Nullable": true
                    },
                    {
                        "$Name": "EntitySet",
                        "$Collection": true,
                        "$Type": "Edm.EntityType",
                        "@Core.Description": "A named or implicit entity set"
                    }
                ],
                "$ReturnType": {
                    "$Type": "Edm.EntityType",
                    "$Nullable": true
                }
            }
        ],
        "isroot": [
            {
                "$Kind": "Function",
                "$IsBound": true,
                "@Core.Description": "Is the entity the root of the specified hierarchy?",
                "$Parameter": [
                    {
                        "$Name": "Entity",
                        "$Type": "Edm.EntityType"
                    },
                    {
                        "$Name": "Hierarchy",
                        "$Type": "Aggregation.HierarchyQualifier"
                    }
                ],
                "$ReturnType": {
                    "$Type": "Edm.Boolean"
                }
            }
        ],
        "isdescendant": [
            {
                "$Kind": "Function",
                "$IsBound": true,
                "@Core.Description": "Is the entity a descendant in the specified hierarchy of the parent node, optionally with at most the specified distance?",
                "$Parameter": [
                    {
                        "$Name": "Entity",
                        "$Type": "Edm.EntityType"
                    },
                    {
                        "$Name": "Hierarchy",
                        "$Type": "Aggregation.HierarchyQualifier"
                    },
                    {
                        "$Name": "Node",
                        "$Type": "Edm.PrimitiveType",
                        "@Core.Description": "Parent node"
                    },
                    {
                        "$Name": "MaxDistance",
                        "$Type": "Edm.Int16",
                        "$Nullable": true
                    }
                ],
                "$ReturnType": {
                    "$Type": "Edm.Boolean"
                }
            }
        ],
        "isancestor": [
            {
                "$Kind": "Function",
                "$IsBound": true,
                "@Core.Description": "Is the entity an ancestor in the specified hierarchy of the child node, optionally with at most the specified distance?",
                "$Parameter": [
                    {
                        "$Name": "Entity",
                        "$Type": "Edm.EntityType"
                    },
                    {
                        "$Name": "Hierarchy",
                        "$Type": "Aggregation.HierarchyQualifier"
                    },
                    {
                        "$Name": "Node",
                        "$Type": "Edm.PrimitiveType",
                        "@Core.Description": "Child node"
                    },
                    {
                        "$Name": "MaxDistance",
                        "$Type": "Edm.Int16",
                        "$Nullable": true
                    }
                ],
                "$ReturnType": {
                    "$Type": "Edm.Boolean"
                }
            }
        ],
        "issibling": [
            {
                "$Kind": "Function",
                "$IsBound": true,
                "@Core.Description": "Does the entity have the same parent node in the specified hierarchy as the sibling node?",
                "$Parameter": [
                    {
                        "$Name": "Entity",
                        "$Type": "Edm.EntityType"
                    },
                    {
                        "$Name": "Hierarchy",
                        "$Type": "Aggregation.HierarchyQualifier"
                    },
                    {
                        "$Name": "Node",
                        "$Type": "Edm.PrimitiveType",
                        "@Core.Description": "Sibling node"
                    }
                ],
                "$ReturnType": {
                    "$Type": "Edm.Boolean"
                }
            }
        ],
        "isleaf": [
            {
                "$Kind": "Function",
                "$IsBound": true,
                "@Core.Description": "Is the entity without descendants in the specified hierarchy?",
                "$Parameter": [
                    {
                        "$Name": "Entity",
                        "$Type": "Edm.EntityType"
                    },
                    {
                        "$Name": "Hierarchy",
                        "$Type": "Aggregation.HierarchyQualifier"
                    }
                ],
                "$ReturnType": {
                    "$Type": "Edm.Boolean"
                }
            }
        ],
        "AvailableOnAggregates": {
            "$Kind": "Term",
            "$Type": "Aggregation.AvailableOnAggregatesType",
            "$AppliesTo": [
                "Action",
                "Function"
            ],
            "@Core.Description": "This action or function is available on aggregated entities if the `RequiredProperties` are still defined"
        },
        "AvailableOnAggregatesType": {
            "$Kind": "ComplexType",
            "RequiredProperties": {
                "$Collection": true,
                "$Type": "Edm.PropertyPath",
                "@Core.Description": "Properties required to apply this action or function"
            }
        },
        "NavigationPropertyAggregationCapabilities": {
            "$Kind": "ComplexType",
            "$BaseType": "Capabilities.NavigationPropertyRestriction",
            "@Core.Revisions": [
                {
                    "Kind": "Deprecated",
                    "Description": "[`Capabilities.NavigationRestrictions`](Org.OData.Capabilities.V1.md#NavigationRestrictions) that make use of the additional properties in this subtype are deprecated in favor of [`ApplySupported`](#ApplySupported) and [`CustomAggregate`](#CustomAggregate)"
                }
            ],
            "@Core.Description": "Aggregation capabilities on a navigation path",
            "ApplySupported": {
                "$Type": "Aggregation.ApplySupportedType",
                "$Nullable": true,
                "@Core.Description": "Support for `$apply`"
            },
            "CustomAggregates": {
                "$Collection": true,
                "$Type": "Aggregation.CustomAggregateType",
                "@Core.Description": "Supported custom aggregates"
            }
        },
        "CustomAggregateType": {
            "$Kind": "ComplexType",
            "@Core.Revisions": [
                {
                    "Kind": "Deprecated",
                    "Description": "Deprecated since [`NavigationPropertyAggregationCapabilities`](#NavigationPropertyAggregationCapabilities) is also deprecated"
                }
            ],
            "Name": {
                "@Core.Description": "Name of the dynamic property that can be used in the `aggregate` transformation"
            },
            "Type": {
                "@Core.Description": "Qualified name of a primitive type. The aggregated value will be of that type"
            }
        }
    }
}